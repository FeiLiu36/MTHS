program =             "import numpy as np\n\nclass BPPSolver:\n    def __init__(self, capacity: int, weights: list[int | float]):\n        \"\"\"\n        Initialize the BPP solver.\n\n        Args:\n            capacity (int): The capacity of each bin.\n            weights (list[int | float]): A list of item weights.\n        \"\"\"\n        self.capacity = capacity\n        # Filter out items heavier than capacity as they can never be packed\n        self.items = [(i, w) for i, w in enumerate(weights) if w <= capacity]\n        self.num_items = len(self.items)\n\n    def solve(self) -> list[list[int]]:\n        \"\"\"\n        Solve the Bin Packing Problem using the First-Fit-Decreasing heuristic.\n\n        This heuristic first sorts the items in descending order of their weights.\n        Then, it iterates through the sorted items and places each item into the\n        first bin where it fits. If an item does not fit into any existing bin,\n        a new bin is created for it.\n\n        Returns:\n            A list of lists, where each inner list represents a bin and contains the\n            original indices of the items packed into it.\n            e.g., [[0, 2], [1, 3]] means item 0 and 2 are in the first bin,\n                  and item 1 and 3 are in the second.\n        \"\"\"\n        bins = []  # Stores the content (indices) of each bin\n        bin_loads = []  # Stores the current load of each bin\n\n        # Sort items in descending order of weight, keeping original indices\n        sorted_items = sorted(self.items, key=lambda x: x[1], reverse=True)\n\n        # Handle the case where there are no valid items to pack\n        if not sorted_items:\n            return []\n\n        for item_index, item_weight in sorted_items:\n            placed = False\n            # Find the first bin where the item fits\n            for i in range(len(bins)):\n                if bin_loads[i] + item_weight <= self.capacity:\n                    bins[i].append(item_index)\n                    bin_loads[i] += item_weight\n                    placed = True\n                    break\n\n            # If it could not be placed in any existing bin, open a new one\n            if not placed:\n                bins.append([item_index])\n                bin_loads.append(item_weight)\n\n        return bins"